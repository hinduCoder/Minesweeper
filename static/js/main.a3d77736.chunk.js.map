{"version":3,"sources":["components/Cell.tsx","components/Field.tsx","components/Stats.tsx","App.tsx","code/Matrix.ts","code/Field.ts","reducer.ts","store.ts","index.tsx"],"names":["connect","dispatch","props","open","type","x","y","toggleFlag","autoOpen","className","onClick","onContextMenu","e","preventDefault","onDoubleClick","closed","flagged","bomb","number","store","field","Fragment","map","r","i","key","c","j","state","bombs","toString","padStart","Matrix","_width","_height","_items","this","Array","Error","calculateIndex","value","generator","iterate","_","setItemAt","callback","itemAt","result","push","unsageGetItemAt","filter","item","undefined","subMatrix","fill","x1","y1","height","row","width","Field","_bombCount","_field","_firstOpenedPosition","items","bombCount","cells","length","generate","thisCell","cellAt","forEach","openInner","fieldMatrix","get3X3SubMatrixAround","cell","getItemsAround","populateBombs","pattern","setNumbers","position","random","Math","abs","iterateField","reduce","max","floor","getInitialState","cloneDeep","toDoubleArray","bombsRemaining","createStore","action","applyMiddleware","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3d77736.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Cell.css';\r\n\r\ninterface DispatchProps {\r\n    open: () => void;\r\n    toggleFlag: () => void;\r\n    autoOpen: () => void;\r\n}\r\n\r\ninterface OwnProps {\r\n    bomb: boolean;\r\n    closed: boolean;\r\n    number?: number | null;\r\n    flagged: boolean;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ntype Props = DispatchProps & OwnProps;\r\n\r\nfunction Cell(props: Props) {\r\n    return (\r\n    <div \r\n        className=\"cell\" \r\n        onClick={() => props.open()} \r\n        onContextMenu={e => { e.preventDefault(); props.toggleFlag() }}\r\n        onDoubleClick={props.autoOpen}\r\n    >\r\n        {renderContent()}\r\n    </div>);\r\n\r\n    function renderContent() {\r\n        if (props.closed) {\r\n            return (\r\n                <div className=\"cover\">\r\n                    {props.flagged ? '‚õ≥Ô∏è' : null}\r\n                </div>\r\n            );\r\n        } else {\r\n            return props.bomb ? 'üí£' : props.number\r\n        }\r\n    }\r\n}\r\n\r\ninterface DispatchProps {\r\n    open: () => void\r\n}\r\n\r\nexport default connect<{}, DispatchProps, OwnProps>(null, (dispatch, props) => {\r\n    return {\r\n        open: () => dispatch({type: 'OPEN', x: props.x, y: props.y}),\r\n        toggleFlag: () => dispatch({type: 'TOGGLE_FLAG', x: props.x, y: props.y}),\r\n        autoOpen: () => dispatch({type: 'AUTO_OPEN', x: props.x, y: props.y})\r\n    }\r\n})(Cell);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cell from './Cell'\r\nimport { Store } from '../store'\r\nimport ICell from '../code/Cell';\r\n\r\nimport './Field.css';\r\n\r\ninterface StateProps {\r\n    field: ICell[][]\r\n}\r\n\r\ntype Props = StateProps;\r\n\r\nconst Field: React.FunctionComponent<Props> = function({ field }: Props) {\r\n    return <React.Fragment>\r\n        {field.map((r, i) => <div className=\"row\" key={i}>\r\n                {r.map((c, j) => \r\n                    <Cell key={j} y={j} x={i} closed={c.closed} bomb={c.bomb} number={c.number} flagged={c.flagged}/>)}\r\n                </div>)}\r\n    </React.Fragment>\r\n}\r\n\r\nexport default connect<StateProps, {}, {}, Store>(store => ({ field: store.field }))(Field);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../store'\r\n\r\nimport './Stats.css';\r\n\r\ninterface StateToProps {\r\n    bombs: number;\r\n}\r\n\r\ntype Props = StateToProps;\r\n\r\nfunction Stats(props: Props) {\r\n    return (\r\n        <div className=\"bombs\">{`üí£ ${props.bombs.toString().padStart(2, '0')}`}</div>\r\n    )\r\n}\r\n\r\nexport default connect<StateToProps, {}, {}, Store>(state => {\r\n    return {\r\n        bombs: state.bombs\r\n    }\r\n})(Stats);","import React from 'react';\r\nimport './App.css';\r\nimport Field from './components/Field';\r\nimport Stats from './components/Stats';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Field/>\r\n      <Stats/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default connect()(App);\r\n","export default class Matrix<T> {\r\n    private _items: T[];\r\n\r\n    public get items(): T[] {\r\n        return this._items;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    constructor(private _width: number, private _height: number) {\r\n        this._items = new Array(_width * _height)\r\n    }\r\n\r\n    public itemAt(x: number, y: number): T  {\r\n        if (x < 0 || x >= this._height) {\r\n            throw new Error('x is out of range');\r\n        }\r\n        if (y < 0 || y >= this._width) {\r\n            throw new Error('y is out of range');\r\n        }\r\n        return this._items[this.calculateIndex(x, y)];\r\n    }\r\n\r\n    private unsageGetItemAt(x: number, y: number): T | undefined {\r\n        if (x < 0 || x >= this._height || y < 0 || y >= this._width) {\r\n            return undefined;\r\n        }\r\n        return this._items[this.calculateIndex(x, y)];\r\n    }\r\n\r\n    public setItemAt(x: number, y: number, value: T) {\r\n        if (x < 0 || x >= this._height || y < 0 || y >= this._width) {\r\n            return;\r\n        }\r\n\r\n        this._items[this.calculateIndex(x, y)] = value;\r\n    }\r\n\r\n    public fill(generator: (x: number, y: number) => T): void {\r\n        this.iterate((_, x, y) => this.setItemAt(x, y, generator(x, y)));\r\n    }\r\n\r\n    public iterate(callback: (item: T, x: number, y: number) => void): void {\r\n        for(let x = 0; x < this._height; x++) {\r\n            for(let y = 0; y < this._width; y++) {\r\n                callback(this.itemAt(x, y), x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getItemsAround(x: number, y: number): T[] {\r\n        const result = [];\r\n        for (let i = -1; i <= 1; i++) {\r\n            for(let j = -1; j <= 1; j++) {\r\n                if (i === 0 && j === 0) {\r\n                    continue;\r\n                }\r\n                result.push(this.unsageGetItemAt(x+i, y+j));\r\n            }\r\n        }\r\n\r\n        return result.filter(item => item !== undefined) as T[];\r\n    }\r\n\r\n    public get3X3SubMatrixAround(x: number, y: number): Matrix<T | undefined> {\r\n        const subMatrix = new Matrix<T | undefined>(3, 3);\r\n        subMatrix.fill((x1, y1) => this.unsageGetItemAt(x+x1-1, y+y1-1));\r\n        return subMatrix;\r\n    }\r\n\r\n    public toDoubleArray(): T[][] {\r\n        const result:T[][] = [];\r\n        for (let x = 0; x < this.height; x++) {\r\n            const row:T[] = [];\r\n            result.push(row);\r\n            for (let y = 0; y < this.width; y++) {\r\n                row.push(this.itemAt(x, y));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private calculateIndex(x: number, y: number): number {\r\n        return x*this._width + y;\r\n    }\r\n}","import Cell from './Cell';\r\nimport Matrix from './Matrix';\r\n\r\nexport default class Field {\r\n    private _field: Matrix<Cell>;\r\n    private _firstOpenedPosition?: number[];\r\n\r\n    public get fieldMatrix(): Matrix<Cell> {\r\n        return this._field;\r\n    }\r\n\r\n    public get cells(): Cell[] {\r\n        return this._field.items;\r\n    }\r\n\r\n    public get bombCount(): number {\r\n        return this._bombCount;\r\n    }\r\n\r\n    public get bombsRemaining(): number {\r\n        return this.bombCount - this.cells.filter(c => c.flagged).length;\r\n    }\r\n\r\n    constructor(private _width: number = 10, private _height: number = 10, private _bombCount = 10) {\r\n        this._field = new Matrix(_width, _height);\r\n        this._field.fill(() => ({ bomb: false, closed: true, flagged: false }));\r\n    }\r\n\r\n    public cellAt(x: number, y: number): Cell {\r\n        return this._field.itemAt(x, y);\r\n    }\r\n \r\n\r\n    public open(x: number, y: number): void {\r\n        if (!this._firstOpenedPosition) {\r\n            this._firstOpenedPosition = [x, y];\r\n            this.generate();\r\n        }\r\n\r\n        const thisCell = this.cellAt(x, y);\r\n        if (!thisCell.closed || thisCell.flagged) {\r\n            return;\r\n        }\r\n\r\n        thisCell.closed = false;\r\n\r\n        if (thisCell.bomb) {\r\n            this.cells.forEach(c => c.closed = false);\r\n            return;\r\n        }\r\n\r\n        if (thisCell.number != null) {\r\n            return;\r\n        }\r\n\r\n        const openInner = (x: number, y: number) => {\r\n            this.fieldMatrix.get3X3SubMatrixAround(x, y).iterate((cell, x1, y1) => {\r\n                if (!cell || cell.bomb || !cell.closed) {\r\n                    return;\r\n                }\r\n                cell.closed = false;\r\n                if (cell.number == null)\r\n                    openInner(x+x1-1, y+y1-1);\r\n            })\r\n        }\r\n\r\n        openInner(x, y);\r\n    }\r\n\r\n    public autoOpen(x: number, y: number): void {\r\n        const cell = this.cellAt(x, y);\r\n        if (cell.closed || cell.number == null) {\r\n            return;\r\n        }\r\n\r\n        const cellsAround = this.fieldMatrix.getItemsAround(x, y);\r\n\r\n        if (cellsAround.filter(c => c.flagged).length === cell.number) {\r\n            this.fieldMatrix.get3X3SubMatrixAround(x, y).iterate((cell, x1, y1) => {\r\n                if (!cell || cell.flagged)\r\n                    return;\r\n                this.open(x+x1-1, y+y1-1);\r\n            })\r\n        }\r\n    }\r\n\r\n    private generate(): void {\r\n        this.populateBombs();\r\n    }\r\n    \r\n    public populateBombsFromPattern(pattern: string): void {\r\n        const bomb = '*';\r\n        const empty = '_';\r\n        const boundary = '|'\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n        for (let currentSign of pattern) {\r\n            switch(currentSign) {\r\n                case boundary: x++; y = 0; continue;\r\n                case bomb: this.cellAt(x, y).bomb = true; break;\r\n                case empty: this.cellAt(x, y).bomb = false; break;\r\n            }\r\n            y++;\r\n        }\r\n\r\n        this.setNumbers()\r\n    }\r\n\r\n    private populateBombs(): void {\r\n        let bombCount = this._bombCount;\r\n        while (bombCount > 0) {\r\n            const position = [this.random(this._height), this.random(this._width)];\r\n            \r\n            if (Math.abs(this._firstOpenedPosition![0]-position[0]) < 2 && Math.abs(this._firstOpenedPosition![1]-position[1]) < 2) {\r\n                continue;\r\n            }\r\n\r\n            const cell = this.cellAt(position[0], position[1])\r\n            if (cell.bomb)\r\n            {\r\n                continue;\r\n            }\r\n            cell.bomb = true;\r\n            bombCount--;\r\n        }\r\n        \r\n        this.setNumbers();\r\n    }\r\n    \r\n    private setNumbers(): void {\r\n        \r\n        this.iterateField((cell, x, y) => {\r\n            \r\n            if (cell.bomb){\r\n                cell.number = null;\r\n                return;\r\n            }\r\n            const cellsAround = this._field.getItemsAround(x, y);\r\n            const number = cellsAround.reduce((result, cell) => result + (cell.bomb ? 1 : 0), 0);\r\n            cell.number = number || null;\r\n        })\r\n    }\r\n    \r\n    private random(max: number): number {\r\n        return Math.floor(Math.random() * (max))\r\n    }\r\n\r\n    public iterateField(callback: (cell: Cell, x: number, y: number) => void): void {\r\n        this._field.iterate(callback);\r\n    }\r\n    \r\n}","import { Store } from './store'\r\nimport Field from './code/Field';\r\nimport _ from 'lodash';\r\n\r\ninterface ActionBase {\r\n    type: string\r\n}\r\n\r\ninterface OpenAction extends ActionBase {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface FlagAction extends ActionBase {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ntype Action = OpenAction;\r\n\r\nconst field = new Field(30, 16, 99);\r\n//TODO –≤–æ—Ç —Å —ç—Ç–∏–º –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å\r\nexport function getInitialState(): Store {\r\n    return {\r\n        field: _.cloneDeep(field.fieldMatrix.toDoubleArray()),\r\n        bombs: field.bombsRemaining\r\n    }\r\n}\r\n\r\nexport default function(store: Store | undefined, action: Action): Store {\r\n    switch(action.type) {\r\n        case 'OPEN': \r\n            field.open(action.x, action.y);\r\n            return getInitialState();\r\n        case 'TOGGLE_FLAG':\r\n            const cell = field.cellAt(action.x, action.y);\r\n            if (cell.closed)\r\n                cell.flagged = !cell.flagged;\r\n            return getInitialState();\r\n        case 'AUTO_OPEN':\r\n            field.autoOpen(action.x, action.y);\r\n            return getInitialState();\r\n        default: return getInitialState();\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport reducer, { getInitialState } from './reducer'\r\nimport logger from 'redux-logger'\r\nimport Cell from './code/Cell'\r\n\r\nexport interface Store {\r\n    field: Cell[][],\r\n    bombs: number\r\n}\r\n\r\nexport default createStore(reducer, getInitialState(), applyMiddleware(logger));\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <App />\r\n</Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}