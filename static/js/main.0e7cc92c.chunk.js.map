{"version":3,"sources":["components/Cell.tsx","components/Field.tsx","components/Stats.tsx","App.tsx","code/Matrix.ts","code/Field.ts","reducer.ts","store.ts","index.tsx"],"names":["connect","state","props","cell","field","x","y","bomb","closed","number","flagged","dispatch","open","type","toggleFlag","autoOpen","className","onClick","onContextMenu","e","preventDefault","onDoubleClick","store","width","fieldWidth","height","fieldHeight","renderField","renderRow","Fragment","key","renderCell","bombs","restart","toString","padStart","Matrix","_width","_height","_items","this","Array","Error","calculateIndex","value","generator","iterate","_","setItemAt","callback","itemAt","result","i","j","push","unsageGetItemAt","filter","item","undefined","subMatrix","fill","x1","y1","row","Field","_bombCount","_field","_firstOpenedPosition","reset","items","bombCount","cells","c","length","generate","thisCell","cellAt","forEach","openInner","fieldMatrix","get3X3SubMatrixAround","getItemsAround","populateBombs","pattern","setNumbers","position","random","Math","abs","iterateField","reduce","max","floor","getInitialState","cloneDeep","toDoubleArray","bombsRemaining","createStore","action","applyMiddleware","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e7cc92c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../store';\r\nimport './Cell.css';\r\n\r\ninterface StateToProps {\r\n    bomb: boolean;\r\n    closed: boolean;\r\n    number?: number | null;\r\n    flagged: boolean;\r\n}\r\n\r\ninterface DispatchProps {\r\n    open: () => void;\r\n    toggleFlag: () => void;\r\n    autoOpen: () => void;\r\n}\r\n\r\ninterface OwnProps {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ntype Props = StateToProps & DispatchProps & OwnProps;\r\n\r\nfunction Cell(props: Props) {\r\n    return (\r\n    <div \r\n        className=\"cell\" \r\n        onClick={() => props.open()} \r\n        onContextMenu={e => { e.preventDefault(); props.toggleFlag() }}\r\n        onDoubleClick={props.autoOpen}\r\n    >\r\n        {renderContent()}\r\n    </div>);\r\n\r\n    function renderContent() {\r\n        if (props.closed) {\r\n            return (\r\n                <div className=\"cover\">\r\n                    {props.flagged ? '‚õ≥Ô∏è' : null}\r\n                </div>\r\n            );\r\n        } else {\r\n            return props.bomb ? 'üí£' : props.number\r\n        }\r\n    }\r\n}\r\n\r\ninterface DispatchProps {\r\n    open: () => void\r\n}\r\n\r\nexport default connect<StateToProps, DispatchProps, OwnProps, Store>((state, props) => {\r\n    const cell = state.field[props.x][props.y];\r\n    return {\r\n        bomb: cell.bomb,\r\n        closed: cell.closed,\r\n        number: cell.number,\r\n        flagged: cell.flagged\r\n    };\r\n}, (dispatch, props) => {\r\n    return {\r\n        open: () => dispatch({type: 'OPEN', x: props.x, y: props.y}),\r\n        toggleFlag: () => dispatch({type: 'TOGGLE_FLAG', x: props.x, y: props.y}),\r\n        autoOpen: () => dispatch({type: 'AUTO_OPEN', x: props.x, y: props.y})\r\n    }\r\n})(Cell);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cell from './Cell'\r\nimport { Store } from '../store'\r\n\r\nimport './Field.css';\r\n\r\ninterface StateProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ntype Props = StateProps;\r\n\r\nconst Field: React.FunctionComponent<Props> = function({ width, height }: Props) {\r\n    return (\r\n        <React.Fragment>\r\n            {[...renderField()]}\r\n        </React.Fragment>\r\n    );\r\n\r\n    function* renderField() {\r\n        for (let x = 0; x < height; x++) {\r\n            yield (<div key={x} className=\"row\">{[...renderRow(x)]}</div>);\r\n        }\r\n    }\r\n\r\n    function* renderRow(x: number) {\r\n        for (let y = 0; y < width; y++) {\r\n            yield renderCell(x, y);\r\n        }\r\n    }\r\n\r\n    function renderCell(x: number, y: number) {\r\n        return <Cell key={y} x={x} y={y} />\r\n    }\r\n}\r\n\r\nexport default connect<StateProps, {}, {}, Store>(store => ({\r\n    width: store.fieldWidth,\r\n    height: store.fieldHeight\r\n}))(Field);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Store } from '../store'\r\n\r\nimport './Stats.css';\r\n\r\ninterface StateToProps {\r\n    bombs: number;\r\n}\r\n\r\ninterface DispatchProps {\r\n    restart: () => void;\r\n}\r\n\r\ntype Props = StateToProps & DispatchProps;\r\n\r\nfunction Stats(props: Props) {\r\n    return (\r\n        <div className=\"stats\">\r\n            <div className=\"bombs\">{`üí£ ${props.bombs.toString().padStart(2, '0')}`}</div>\r\n            <button className=\"restart-button\" onClick={props.restart}>–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect<StateToProps, DispatchProps, {}, Store>(state => {\r\n    return {\r\n        bombs: state.bombs\r\n    }\r\n},\r\ndispatch => {\r\n    return {\r\n        restart: () => dispatch({type: 'RESTART'})\r\n    }\r\n})(Stats);","import React from 'react';\r\nimport './App.css';\r\nimport Field from './components/Field';\r\nimport Stats from './components/Stats';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"root\">\r\n      <Field/>\r\n      <Stats/>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default connect()(App);\r\n","export default class Matrix<T> {\r\n    private _items: T[];\r\n\r\n    public get items(): T[] {\r\n        return this._items;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    constructor(private _width: number, private _height: number) {\r\n        this._items = new Array(_width * _height)\r\n    }\r\n\r\n    public itemAt(x: number, y: number): T  {\r\n        if (x < 0 || x >= this._height) {\r\n            throw new Error('x is out of range');\r\n        }\r\n        if (y < 0 || y >= this._width) {\r\n            throw new Error('y is out of range');\r\n        }\r\n        return this._items[this.calculateIndex(x, y)];\r\n    }\r\n\r\n    private unsageGetItemAt(x: number, y: number): T | undefined {\r\n        if (x < 0 || x >= this._height || y < 0 || y >= this._width) {\r\n            return undefined;\r\n        }\r\n        return this._items[this.calculateIndex(x, y)];\r\n    }\r\n\r\n    public setItemAt(x: number, y: number, value: T) {\r\n        if (x < 0 || x >= this._height || y < 0 || y >= this._width) {\r\n            return;\r\n        }\r\n\r\n        this._items[this.calculateIndex(x, y)] = value;\r\n    }\r\n\r\n    public fill(generator: (x: number, y: number) => T): void {\r\n        this.iterate((_, x, y) => this.setItemAt(x, y, generator(x, y)));\r\n    }\r\n\r\n    public iterate(callback: (item: T, x: number, y: number) => void): void {\r\n        for(let x = 0; x < this._height; x++) {\r\n            for(let y = 0; y < this._width; y++) {\r\n                callback(this.itemAt(x, y), x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getItemsAround(x: number, y: number): T[] {\r\n        const result = [];\r\n        for (let i = -1; i <= 1; i++) {\r\n            for(let j = -1; j <= 1; j++) {\r\n                if (i === 0 && j === 0) {\r\n                    continue;\r\n                }\r\n                result.push(this.unsageGetItemAt(x+i, y+j));\r\n            }\r\n        }\r\n\r\n        return result.filter(item => item !== undefined) as T[];\r\n    }\r\n\r\n    public get3X3SubMatrixAround(x: number, y: number): Matrix<T | undefined> {\r\n        const subMatrix = new Matrix<T | undefined>(3, 3);\r\n        subMatrix.fill((x1, y1) => this.unsageGetItemAt(x+x1-1, y+y1-1));\r\n        return subMatrix;\r\n    }\r\n\r\n    public toDoubleArray(): T[][] {\r\n        const result:T[][] = [];\r\n        for (let x = 0; x < this.height; x++) {\r\n            const row:T[] = [];\r\n            result.push(row);\r\n            for (let y = 0; y < this.width; y++) {\r\n                row.push(this.itemAt(x, y));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private calculateIndex(x: number, y: number): number {\r\n        return x*this._width + y;\r\n    }\r\n}","import Cell from './Cell';\r\nimport Matrix from './Matrix';\r\n\r\nexport default class Field {\r\n    private _field: Matrix<Cell>;\r\n    private _firstOpenedPosition?: number[];\r\n\r\n    public get fieldMatrix(): Matrix<Cell> {\r\n        return this._field;\r\n    }\r\n\r\n    public get cells(): Cell[] {\r\n        return this._field.items;\r\n    }\r\n\r\n    public get bombCount(): number {\r\n        return this._bombCount;\r\n    }\r\n\r\n    public get bombsRemaining(): number {\r\n        return this.bombCount - this.cells.filter(c => c.flagged).length;\r\n    }\r\n\r\n    constructor(private _width: number = 10, private _height: number = 10, private _bombCount = 10) {\r\n        this._field = new Matrix(_width, _height);\r\n        this.reset();\r\n    }\r\n\r\n    public reset() {\r\n        this._field.fill(() => ({ bomb: false, closed: true, flagged: false }));\r\n        this._firstOpenedPosition = undefined;\r\n    }\r\n\r\n    public cellAt(x: number, y: number): Cell {\r\n        return this._field.itemAt(x, y);\r\n    }\r\n \r\n\r\n    public open(x: number, y: number): void {\r\n        if (!this._firstOpenedPosition) {\r\n            this._firstOpenedPosition = [x, y];\r\n            this.generate();\r\n        }\r\n\r\n        const thisCell = this.cellAt(x, y);\r\n        if (!thisCell.closed || thisCell.flagged) {\r\n            return;\r\n        }\r\n\r\n        thisCell.closed = false;\r\n\r\n        if (thisCell.bomb) {\r\n            this.cells.forEach(c => c.closed = false);\r\n            return;\r\n        }\r\n\r\n        if (thisCell.number != null) {\r\n            return;\r\n        }\r\n\r\n        const openInner = (x: number, y: number) => {\r\n            this.fieldMatrix.get3X3SubMatrixAround(x, y).iterate((cell, x1, y1) => {\r\n                if (!cell || cell.bomb || !cell.closed) {\r\n                    return;\r\n                }\r\n                cell.closed = false;\r\n                if (cell.number == null)\r\n                    openInner(x+x1-1, y+y1-1);\r\n            })\r\n        }\r\n\r\n        openInner(x, y);\r\n    }\r\n\r\n    public autoOpen(x: number, y: number): void {\r\n        const cell = this.cellAt(x, y);\r\n        if (cell.closed || cell.number == null) {\r\n            return;\r\n        }\r\n\r\n        const cellsAround = this.fieldMatrix.getItemsAround(x, y);\r\n\r\n        if (cellsAround.filter(c => c.flagged).length === cell.number) {\r\n            this.fieldMatrix.get3X3SubMatrixAround(x, y).iterate((cell, x1, y1) => {\r\n                if (!cell || cell.flagged)\r\n                    return;\r\n                this.open(x+x1-1, y+y1-1);\r\n            })\r\n        }\r\n    }\r\n\r\n    private generate(): void {\r\n        this.populateBombs();\r\n    }\r\n    \r\n    public populateBombsFromPattern(pattern: string): void {\r\n        const bomb = '*';\r\n        const empty = '_';\r\n        const boundary = '|'\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n        for (let currentSign of pattern) {\r\n            switch(currentSign) {\r\n                case boundary: x++; y = 0; continue;\r\n                case bomb: this.cellAt(x, y).bomb = true; break;\r\n                case empty: this.cellAt(x, y).bomb = false; break;\r\n            }\r\n            y++;\r\n        }\r\n\r\n        this.setNumbers()\r\n    }\r\n\r\n    private populateBombs(): void {\r\n        let bombCount = this._bombCount;\r\n        while (bombCount > 0) {\r\n            const position = [this.random(this._height), this.random(this._width)];\r\n            \r\n            if (Math.abs(this._firstOpenedPosition![0]-position[0]) < 2 && Math.abs(this._firstOpenedPosition![1]-position[1]) < 2) {\r\n                continue;\r\n            }\r\n\r\n            const cell = this.cellAt(position[0], position[1])\r\n            if (cell.bomb)\r\n            {\r\n                continue;\r\n            }\r\n            cell.bomb = true;\r\n            bombCount--;\r\n        }\r\n        \r\n        this.setNumbers();\r\n    }\r\n    \r\n    private setNumbers(): void {\r\n        \r\n        this.iterateField((cell, x, y) => {\r\n            \r\n            if (cell.bomb){\r\n                cell.number = null;\r\n                return;\r\n            }\r\n            const cellsAround = this._field.getItemsAround(x, y);\r\n            const number = cellsAround.reduce((result, cell) => result + (cell.bomb ? 1 : 0), 0);\r\n            cell.number = number || null;\r\n        })\r\n    }\r\n    \r\n    private random(max: number): number {\r\n        return Math.floor(Math.random() * (max))\r\n    }\r\n\r\n    public iterateField(callback: (cell: Cell, x: number, y: number) => void): void {\r\n        this._field.iterate(callback);\r\n    }\r\n    \r\n}","import { Store } from './store'\r\nimport Field from './code/Field';\r\nimport _ from 'lodash';\r\n\r\ninterface ActionBase {\r\n    type: string\r\n}\r\n\r\ninterface OpenAction extends ActionBase {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface FlagAction extends ActionBase {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ntype Action = OpenAction & FlagAction;\r\n\r\nconst field = new Field(30, 16, 99);\r\n//TODO –≤–æ—Ç —Å —ç—Ç–∏–º –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å\r\nexport function getInitialState(): Store {\r\n    return {\r\n        field: _.cloneDeep(field.fieldMatrix.toDoubleArray()),\r\n        bombs: field.bombsRemaining,\r\n        fieldWidth: field.fieldMatrix.width,\r\n        fieldHeight: field.fieldMatrix.height\r\n    }\r\n}\r\n\r\nexport default function(store: Store | undefined, action: Action): Store {\r\n    switch(action.type) {\r\n        case 'OPEN': \r\n            field.open(action.x, action.y);\r\n            return getInitialState();\r\n        case 'TOGGLE_FLAG':\r\n            const cell = field.cellAt(action.x, action.y);\r\n            if (cell.closed)\r\n                cell.flagged = !cell.flagged;\r\n            return getInitialState();\r\n        case 'AUTO_OPEN':\r\n            field.autoOpen(action.x, action.y);\r\n            return getInitialState();\r\n        case 'RESTART':\r\n            field.reset();\r\n            return getInitialState();\r\n        default: return getInitialState();\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport reducer, { getInitialState } from './reducer'\r\nimport logger from 'redux-logger'\r\nimport Cell from './code/Cell'\r\n\r\nexport interface Store {\r\n    fieldWidth: number,\r\n    fieldHeight: number,\r\n    field: Cell[][],\r\n    bombs: number\r\n}\r\n\r\nexport default createStore(reducer, getInitialState(), applyMiddleware(logger));\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <App />\r\n</Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}